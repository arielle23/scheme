(define (make_code_tree left_branch right_branch)
    (list left_branch right_branch))
(define (make_leaf symbol weight)
    (list symbol weight))
(define left_branch car)
(define right_branch cadr)
(define (symbol_leaf leaf)
    (car leaf))
(symbol_leaf (make_leaf `B 6))
(define (choose_branch bits branch)
    (cond ((equal? 1 bits) (right_branch branch))
          ((equal? 0 bits) (left_branch branch))
          (else
            (error "bad bit -- choose branch" bit))))
(define (leaf? branch)
    (symbol? (car branch)))
(define (decode bits tree)
    (define (decode_iter bits current_branch)
        (if (null? bits)
            `()
            (let ((next_branch (choose_branch (car bits) current_branch)))
                (if (leaf? next_branch)
                    (cons (symbol_leaf next_branch)
                          (decode_iter (cdr bits) tree))
                    (decode_iter (cdr bits) next_branch)))))
    (decode_iter bits tree))
(define sample_tree
    (make_code_tree (make_leaf `A 4)
                    (make_code_tree (make_leaf `B 2)
                                    (make_code_tree (make_leaf `D 1)
                                                    (make_leaf `C 1)))))
(define sample_message `(0 1 1 0 0 1 0 1 0 1 1 1 0))
(decode sample_message sample_tree)