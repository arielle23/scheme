(define (accumulate op init sequence)
    (if (null? sequence)
        init
        (op (car sequence)
            (accumulate op init (cdr sequence)))))
(define fold_right accumulate)
(define (reverse sequence)
    (fold_right (lambda (x y)
                        (append y (list x)))
                `()
                sequence))
(reverse (list 1 2 3))
(define (fold_left op init sequence)
    (define (iter result rest)
        (if (null? rest)
            result
            (iter (op result (car rest))
                  (cdr rest))))
    (iter init sequence))
(define (left_reverse sequence)
    (fold_left (lambda (x y)
                       (append (list y) x))
               `()
               sequence))
(left_reverse (list 1 2 3))