(define (make_deque) (cons `() `()))
(define (front_ptr deque) (car deque))
(define (rear_ptr deque) (cdr deque))
(define (make_new_pair item)
    (cons (cons item `()) `()))
(define (prev_ptr pair)
    (cdar pair))
(define (set_prev_ptr! pair set_pair)
    (set-cdr! (car pair) set_pair))
(define (set_next_ptr! pair set_pair)
    (set-cdr! pair set_pair))
(define (set_front_ptr! deque item)
    (set-car! deque item))
(define (set_rear_ptr! deque item)
    (set-cdr! deque item))
(define (next_ptr pair)
    (cdr pair))
(define (empty_deque? deque)
    (null? (front_ptr deque)))
(define (front_insert deque item)
    (let ((new_pair (make_new_pair item)))
        (if (empty_deque? deque)
            (begin (set_front_ptr! deque new_pair)
                   (set_rear_ptr! deque new_pair)
                   deque)
            (begin  (set_prev_ptr! (front_ptr deque) new_pair)
                    (set_next_ptr! new_pair (front_ptr deque))
                    (set_front_ptr! deque new_pair)
                    deque))))
(define (rear_insert deque item)
    (let ((new_pair (make_new_pair item)))
        (if (empty_deque? deque)
            (begin  (set_front_ptr! deque new_pair)
                    (set_rear_ptr! deque new_pair)
                    deque)
            (begin  (set_prev_ptr! new_pair (rear_ptr deque))
                    (set_next_ptr! (rear_ptr deque) new_pair)
                    (set_rear_ptr! deque new_pair)
                    deque))))
(define (front_delete_deque deque)
    (if (empty_deque? deque)
        (error "empty deque" deque)
        (if (eq? (front_ptr deque) (rear_ptr deque))
            (begin (set_front_ptr! deque `())
                   (set_rear_ptr! deque `())
                   deque)
            (begin (set_front_ptr! deque (next_ptr (front_ptr deque)))
                   deque))))
(define (rear_delete_deque deque)
    (if (empty_deque? deque)
        (error "empty deque" deque)
        (if (eq? (front_ptr deque) (rear_ptr deque))
            (begin (set_front_ptr! deque `())
                   (set_rear_ptr! deque `())
                   deque)
            (begin (set_rear_ptr! deque (prev_ptr (rear_ptr deque)))
                   (set-cdr! (rear_ptr deque) `())
                   deque))))
(define (print_deque deque)
    (define (print_iter queue)
        (if (null? queue)
            `()
            (cons (caar queue) (print_iter (cdr queue)))))
    (print_iter (front_ptr deque)))
(define q1 (make_deque))
(empty_deque? q1)
(print_deque (front_insert (rear_insert (front_insert q1 `a) `b) `c))
(print_deque (rear_delete_deque q1))
(print_deque (front_delete_deque q1))
