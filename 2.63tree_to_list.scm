; (define (tree->list tree)
;     (define (copy_to_list tree result_tree)
;         (if (null? tree)
;             result_tree
;             (copy_to_list (left_branch tree)
;                           (cons (entry tree)
;                                 (copy_to_list (right_branch tree)
;                                               result_tree)))))
;     (copy_to_list tree `()))
(define (tree->list tree)
    (if (null? tree)
        `()
        (append (tree->list (left_branch tree))
                (cons (entry tree)
                      (tree->list (right_branch tree))))))
(define (left_branch tree)
    (cadr tree))
(define (right_branch tree)
    (caddr tree))
(define (entry tree)
    (car tree))
(tree->list (list 8 (list 6 (list 3 `() `()) (list 7 `() `())) (list 11 (list 9 `() `()) (list 13 `() `()))))