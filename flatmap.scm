(define (accumulate op init sequence)
    (if (null? sequence)
        init
        (op (car sequence)
            (accumulate op init (cdr sequence)))))
(define (enumerate_interval low high)
    (if (> low high)
        `()
        (cons low (enumerate_interval (+ low 1 ) high))))

(define (flatmap proc sequence)
    (accumulate append `() (map proc sequence)))
(define (permutations s)
    (if (null? s)
        (list `())
        (flatmap (lambda (x)
                           (map (lambda (p) (cons x p))
                                (permutations (remove x s))))
                 s)))
(define (remove items s)
    (fliter (lambda (x) (not (= x items)))
            s))
(define (fliter prediction sequence)
    (if (null? sequence)
        `()
        (if (prediction (car sequence))
            (cons (car sequence)
                  (fliter prediction (cdr sequence)))
            (fliter prediction (cdr sequence)))))
(permutations (list 1 2 3))
(fliter (lambda (x)
                (> x 0))
        (list 1 2 -1 3 4))