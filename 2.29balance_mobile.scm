(define (make_mobile left right)
    (list left right))
(define (make_branch length structure)
    (list length structure))
(define (left_branch mobile)
    (car mobile))
(define (right_branch mobile)
    (car (cdr mobile)))

(define (branch_length branch)
    (car branch))
(define (branch_structure branch)
    (car (cdr branch)))

(define (total_weight mobile)
    (define (branch_weight branch)
        (if (pair? (branch_structure branch))
            (total_weight (branch_structure branch))
            (branch_structure branch)))
    (+ (branch_weight (left_branch mobile))
       (branch_weight (right_branch mobile))))

(define x_mobile (make_mobile (make_branch 3 10) 
                              (make_branch 5 (make_mobile (make_branch 2 4) 
                                                          (make_branch 4 2)))))

(define (mobile_branch_weight branch)
    (* (branch_length branch)
       (if (pair? (branch_structure branch))
           (total_weight (branch_structure branch))
           (branch_structure branch))))

; (mobile_branch_weight (right_branch x_mobile))

(define (balance? mobile)
    (define (branch_equal? mobile)
        (= (mobile_branch_weight (left_branch mobile))
           (mobile_branch_weight (right_branch mobile))))
    (define (branch_pair? branch)
        (if (pair? (branch_structure branch))
            (balance? (branch_structure branch))
            true))
    (if (branch_equal? mobile)
        (and (branch_pair? (left_branch mobile))
             (branch_pair? (right_branch mobile)))
        false))
(balance? x_mobile)
