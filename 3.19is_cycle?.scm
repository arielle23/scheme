(define (is_cycle? lst)
    (define (iter_is_cycle? x y)
        (let ((x_walk (step_walk x 1))
              (y_walk (step_walk y 2)))
            (cond ((or (null? x_walk) (null? y_walk))
                    false)
                  ((eq? x_walk y_walk)
                    true)
                  (else
                    (iter_is_cycle? x_walk y_walk)))))
    (iter_is_cycle? lst lst))
(define (step_walk lst step)
    (if (> step 0)
        (step_walk (cdr lst) (- step 1))
        lst))
(define (last_pair x)
    (if (null? (cdr x))
        x
        (last_pair (cdr x))))
(define x (list `a `b `c))
(set-cdr! (last_pair x) x)
(is_cycle? x)